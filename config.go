package main

import (
	"encoding/json"
	"flag"
	"math/rand"
	"net/http"
	"os"
	"os/exec"
	"strings"
	"time"

	"github.com/higgyhiggy/project-0/file"
)

var name bool
var Cmdout string

type autoGenerated []struct {
	Text   string `json:"text"`
	Author string `json:"author"`
}

func init() {
	word := autoGenerated{}

	flag.BoolVar(&name, "file", false, "file name to open or create")

	flag.Parse()
	//fmt.Println(len(os.Args))
	rand.Seed(time.Now().UnixNano())
	resp, err := http.Get("https://type.fit/api/quotes")
	if err != nil {
		panic(err)
	}
	defer resp.Body.Close()

	err = json.NewDecoder(resp.Body).Decode(&word)

	txtname := file.Create(name)
	//
	//

	//
	//
	f, err := os.Create(txtname)
	if err != nil {

	}
	defer f.Close()
	shorter := strings.Split(word[rand.Intn(len(word))].Text, ".")
	for _, v := range shorter {
		//fmt.Println(v)
		n2, _ := f.WriteString(strings.ToUpper(v) + "\n")
		//n2, _ := f.WriteString(strings.ToUpper(word[rand.Intn(len(word))].Text) + "\n" + "\n")
		if n2 == 0 {

		}
	}

	out, _ := exec.Command("code", txtname).Output()
	if out != nil {

	}
	Cmdout = "the file created is " + txtname + "by user " + os.Getenv("USER")
}
